{"version":3,"sources":["webpack:///./node_modules/three/examples/jsm/controls/TransformControls.js","webpack:///src/views/RunBox.vue","webpack:///./src/views/RunBox.vue?8de3","webpack:///./src/views/RunBox.vue"],"names":["TransformControls","camera","domElement","undefined","console","warn","document","three_module","call","this","visible","_gizmo","TransformControlsGizmo","add","_plane","TransformControlsPlane","scope","defineProperty","changeEvent","type","mouseDownEvent","mouseUpEvent","mode","objectChangeEvent","raycaster","intersectObjectWithRay","object","includeInvisible","allIntersections","intersectObject","i","length","_tempVector","_tempVector2","_tempQuaternion","_unit","X","Y","Z","pointStart","pointEnd","offset","rotationAxis","startNorm","endNorm","rotationAngle","cameraPosition","cameraQuaternion","cameraScale","parentPosition","parentQuaternion","parentQuaternionInv","parentScale","worldPositionStart","worldQuaternionStart","worldScaleStart","worldPosition","worldQuaternion","worldQuaternionInv","worldScale","eye","positionStart","quaternionStart","scaleStart","propName","defaultValue","propValue","Object","get","set","value","dispatchEvent","getPointer","event","ownerDocument","pointerLockElement","x","y","button","pointer","changedTouches","rect","getBoundingClientRect","clientX","left","width","clientY","top","height","onPointerHover","enabled","pointerType","pointerHover","onPointerDown","style","touchAction","addEventListener","onPointerMove","pointerDown","pointerMove","onPointerUp","removeEventListener","pointerUp","dispose","traverse","child","geometry","material","attach","detach","axis","updateMatrixWorld","parent","error","matrixWorld","decompose","copy","invert","sub","normalize","prototype","dragging","setFromCamera","intersect","picker","name","planeIntersect","space","snap","rotationSnap","rotation","Math","round","z","position","quaternion","scale","point","applyQuaternion","indexOf","divide","translationSnap","search","setFromMatrixPosition","d","dot","multiply","scaleSnap","ROTATION_SPEED","distanceTo","angleTo","cross","setFromAxisAngle","getMode","setMode","setTranslationSnap","setRotationSnap","setScaleSnap","setSize","size","setSpace","update","assign","create","constructor","isTransformControls","gizmoMaterial","depthTest","depthWrite","transparent","side","fog","toneMapped","gizmoLineMaterial","linewidth","matInvisible","clone","opacity","matHelper","matRed","color","matGreen","matBlue","matWhiteTransparent","matYellowTransparent","matCyanTransparent","matMagentaTransparent","matLineRed","matLineGreen","matLineBlue","matLineCyan","matLineMagenta","matLineYellow","matLineGray","matLineYellowTransparent","arrowGeometry","scaleHandleGeometry","lineGeometry","setAttribute","CircleGeometry","radius","arc","vertices","push","cos","PI","sin","gizmoTranslate","XYZ","XY","YZ","XZ","pickerTranslate","helperTranslate","START","END","DELTA","gizmoRotate","E","XYZE","helperRotate","AXIS","pickerRotate","gizmoScale","XYZX","XYZY","XYZZ","pickerScale","helperScale","setupGizmo","gizmoMap","gizmo","tag","updateMatrix","tempGeometry","applyMatrix4","matrix","renderOrder","Infinity","tempVector","tempEuler","alignVector","zeroVector","lookAtMatrix","tempQuaternion","tempQuaternion2","identityQuaternion","unitX","unitY","unitZ","helper","handles","concat","children","factor","handle","isOrthographicCamera","bottom","zoom","min","tan","fov","multiplyScalar","abs","setFromRotationMatrix","lookAt","atan2","multiplyQuaternions","showX","showY","showZ","_opacity","_color","lerp","split","some","a","setFromEuler","isTransformControlsGizmo","wireframe","dirVector","tempMatrix","isTransformControlsPlane","RunBox","__webpack_require__","data","scene","controls","renderer","isOpenDoor","amdLight","dirLight","ponLight","formControls","line","mouse","dummy","curve","loopTime","runBox","cubeList","methods","initScene","container","$refs","webglDom","offsetWidth","offsetHeight","background","initCamera","initControls","OrbitControls","initLight","initRenderer","_this","antialias","alpha","setClearColor","setClearAlpha","setPixelRatio","window","devicePixelRatio","shadowMap","appendChild","innerWidth","innerHeight","rayCaster","intersects","intersectObjects","log","forEach","v","points","getPoints","setFromPoints","render","initScreen","_this2","map","addBox","cube","curveType","closed","changePosition","t","getPointAt","changeLookAt","lookAtVec","getTangentAt","chang","gao","kuan","mesh","obj","Date","now","vector","Tween_default","requestAnimationFrame","init","mounted","$nextTick","views_RunBox","_h","$createElement","_c","_self","staticClass","ref","staticRenderFns","Component","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/7.c6df656b4fba08531284.js","sourcesContent":["import {\n\tBoxBufferGeometry,\n\tBufferGeometry,\n\tColor,\n\tCylinderBufferGeometry,\n\tDoubleSide,\n\tEuler,\n\tFloat32BufferAttribute,\n\tLine,\n\tLineBasicMaterial,\n\tMatrix4,\n\tMesh,\n\tMeshBasicMaterial,\n\tObject3D,\n\tOctahedronBufferGeometry,\n\tPlaneBufferGeometry,\n\tQuaternion,\n\tRaycaster,\n\tSphereBufferGeometry,\n\tTorusBufferGeometry,\n\tVector3\n} from '../../../build/three.module.js';\n\nvar TransformControls = function ( camera, domElement ) {\n\n\tif ( domElement === undefined ) {\n\n\t\tconsole.warn( 'THREE.TransformControls: The second parameter \"domElement\" is now mandatory.' );\n\t\tdomElement = document;\n\n\t}\n\n\tObject3D.call( this );\n\n\tthis.visible = false;\n\tthis.domElement = domElement;\n\n\tvar _gizmo = new TransformControlsGizmo();\n\tthis.add( _gizmo );\n\n\tvar _plane = new TransformControlsPlane();\n\tthis.add( _plane );\n\n\tvar scope = this;\n\n\t// Define properties with getters/setter\n\t// Setting the defined property will automatically trigger change event\n\t// Defined properties are passed down to gizmo and plane\n\n\tdefineProperty( 'camera', camera );\n\tdefineProperty( 'object', undefined );\n\tdefineProperty( 'enabled', true );\n\tdefineProperty( 'axis', null );\n\tdefineProperty( 'mode', 'translate' );\n\tdefineProperty( 'translationSnap', null );\n\tdefineProperty( 'rotationSnap', null );\n\tdefineProperty( 'scaleSnap', null );\n\tdefineProperty( 'space', 'world' );\n\tdefineProperty( 'size', 1 );\n\tdefineProperty( 'dragging', false );\n\tdefineProperty( 'showX', true );\n\tdefineProperty( 'showY', true );\n\tdefineProperty( 'showZ', true );\n\n\tvar changeEvent = { type: 'change' };\n\tvar mouseDownEvent = { type: 'mouseDown' };\n\tvar mouseUpEvent = { type: 'mouseUp', mode: scope.mode };\n\tvar objectChangeEvent = { type: 'objectChange' };\n\n\t// Reusable utility variables\n\n\tvar raycaster = new Raycaster();\n\n\tfunction intersectObjectWithRay( object, raycaster, includeInvisible ) {\n\n\t\tvar allIntersections = raycaster.intersectObject( object, true );\n\n\t\tfor ( var i = 0; i < allIntersections.length; i ++ ) {\n\n\t\t\tif ( allIntersections[ i ].object.visible || includeInvisible ) {\n\n\t\t\t\treturn allIntersections[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn false;\n\n\t}\n\n\tvar _tempVector = new Vector3();\n\tvar _tempVector2 = new Vector3();\n\tvar _tempQuaternion = new Quaternion();\n\tvar _unit = {\n\t\tX: new Vector3( 1, 0, 0 ),\n\t\tY: new Vector3( 0, 1, 0 ),\n\t\tZ: new Vector3( 0, 0, 1 )\n\t};\n\n\tvar pointStart = new Vector3();\n\tvar pointEnd = new Vector3();\n\tvar offset = new Vector3();\n\tvar rotationAxis = new Vector3();\n\tvar startNorm = new Vector3();\n\tvar endNorm = new Vector3();\n\tvar rotationAngle = 0;\n\n\tvar cameraPosition = new Vector3();\n\tvar cameraQuaternion = new Quaternion();\n\tvar cameraScale = new Vector3();\n\n\tvar parentPosition = new Vector3();\n\tvar parentQuaternion = new Quaternion();\n\tvar parentQuaternionInv = new Quaternion();\n\tvar parentScale = new Vector3();\n\n\tvar worldPositionStart = new Vector3();\n\tvar worldQuaternionStart = new Quaternion();\n\tvar worldScaleStart = new Vector3();\n\n\tvar worldPosition = new Vector3();\n\tvar worldQuaternion = new Quaternion();\n\tvar worldQuaternionInv = new Quaternion();\n\tvar worldScale = new Vector3();\n\n\tvar eye = new Vector3();\n\n\tvar positionStart = new Vector3();\n\tvar quaternionStart = new Quaternion();\n\tvar scaleStart = new Vector3();\n\n\t// TODO: remove properties unused in plane and gizmo\n\n\tdefineProperty( 'worldPosition', worldPosition );\n\tdefineProperty( 'worldPositionStart', worldPositionStart );\n\tdefineProperty( 'worldQuaternion', worldQuaternion );\n\tdefineProperty( 'worldQuaternionStart', worldQuaternionStart );\n\tdefineProperty( 'cameraPosition', cameraPosition );\n\tdefineProperty( 'cameraQuaternion', cameraQuaternion );\n\tdefineProperty( 'pointStart', pointStart );\n\tdefineProperty( 'pointEnd', pointEnd );\n\tdefineProperty( 'rotationAxis', rotationAxis );\n\tdefineProperty( 'rotationAngle', rotationAngle );\n\tdefineProperty( 'eye', eye );\n\n\t{\n\n\t\tdomElement.addEventListener( 'pointerdown', onPointerDown, false );\n\t\tdomElement.addEventListener( 'pointermove', onPointerHover, false );\n\t\tscope.domElement.ownerDocument.addEventListener( 'pointerup', onPointerUp, false );\n\n\t}\n\n\tthis.dispose = function () {\n\n\t\tdomElement.removeEventListener( 'pointerdown', onPointerDown );\n\t\tdomElement.removeEventListener( 'pointermove', onPointerHover );\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointermove', onPointerMove );\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointerup', onPointerUp );\n\n\t\tthis.traverse( function ( child ) {\n\n\t\t\tif ( child.geometry ) child.geometry.dispose();\n\t\t\tif ( child.material ) child.material.dispose();\n\n\t\t} );\n\n\t};\n\n\t// Set current object\n\tthis.attach = function ( object ) {\n\n\t\tthis.object = object;\n\t\tthis.visible = true;\n\n\t\treturn this;\n\n\t};\n\n\t// Detatch from object\n\tthis.detach = function () {\n\n\t\tthis.object = undefined;\n\t\tthis.visible = false;\n\t\tthis.axis = null;\n\n\t\treturn this;\n\n\t};\n\n\t// Defined getter, setter and store for a property\n\tfunction defineProperty( propName, defaultValue ) {\n\n\t\tvar propValue = defaultValue;\n\n\t\tObject.defineProperty( scope, propName, {\n\n\t\t\tget: function () {\n\n\t\t\t\treturn propValue !== undefined ? propValue : defaultValue;\n\n\t\t\t},\n\n\t\t\tset: function ( value ) {\n\n\t\t\t\tif ( propValue !== value ) {\n\n\t\t\t\t\tpropValue = value;\n\t\t\t\t\t_plane[ propName ] = value;\n\t\t\t\t\t_gizmo[ propName ] = value;\n\n\t\t\t\t\tscope.dispatchEvent( { type: propName + '-changed', value: value } );\n\t\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} );\n\n\t\tscope[ propName ] = defaultValue;\n\t\t_plane[ propName ] = defaultValue;\n\t\t_gizmo[ propName ] = defaultValue;\n\n\t}\n\n\t// updateMatrixWorld  updates key transformation variables\n\tthis.updateMatrixWorld = function () {\n\n\t\tif ( this.object !== undefined ) {\n\n\t\t\tthis.object.updateMatrixWorld();\n\n\t\t\tif ( this.object.parent === null ) {\n\n\t\t\t\tconsole.error( 'TransformControls: The attached 3D object must be a part of the scene graph.' );\n\n\t\t\t} else {\n\n\t\t\t\tthis.object.parent.matrixWorld.decompose( parentPosition, parentQuaternion, parentScale );\n\n\t\t\t}\n\n\t\t\tthis.object.matrixWorld.decompose( worldPosition, worldQuaternion, worldScale );\n\n\t\t\tparentQuaternionInv.copy( parentQuaternion ).invert();\n\t\t\tworldQuaternionInv.copy( worldQuaternion ).invert();\n\n\t\t}\n\n\t\tthis.camera.updateMatrixWorld();\n\t\tthis.camera.matrixWorld.decompose( cameraPosition, cameraQuaternion, cameraScale );\n\n\t\teye.copy( cameraPosition ).sub( worldPosition ).normalize();\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this );\n\n\t};\n\n\tthis.pointerHover = function ( pointer ) {\n\n\t\tif ( this.object === undefined || this.dragging === true ) return;\n\n\t\traycaster.setFromCamera( pointer, this.camera );\n\n\t\tvar intersect = intersectObjectWithRay( _gizmo.picker[ this.mode ], raycaster );\n\n\t\tif ( intersect ) {\n\n\t\t\tthis.axis = intersect.object.name;\n\n\t\t} else {\n\n\t\t\tthis.axis = null;\n\n\t\t}\n\n\t};\n\n\tthis.pointerDown = function ( pointer ) {\n\n\t\tif ( this.object === undefined || this.dragging === true || pointer.button !== 0 ) return;\n\n\t\tif ( this.axis !== null ) {\n\n\t\t\traycaster.setFromCamera( pointer, this.camera );\n\n\t\t\tvar planeIntersect = intersectObjectWithRay( _plane, raycaster, true );\n\n\t\t\tif ( planeIntersect ) {\n\n\t\t\t\tvar space = this.space;\n\n\t\t\t\tif ( this.mode === 'scale' ) {\n\n\t\t\t\t\tspace = 'local';\n\n\t\t\t\t} else if ( this.axis === 'E' || this.axis === 'XYZE' || this.axis === 'XYZ' ) {\n\n\t\t\t\t\tspace = 'world';\n\n\t\t\t\t}\n\n\t\t\t\tif ( space === 'local' && this.mode === 'rotate' ) {\n\n\t\t\t\t\tvar snap = this.rotationSnap;\n\n\t\t\t\t\tif ( this.axis === 'X' && snap ) this.object.rotation.x = Math.round( this.object.rotation.x / snap ) * snap;\n\t\t\t\t\tif ( this.axis === 'Y' && snap ) this.object.rotation.y = Math.round( this.object.rotation.y / snap ) * snap;\n\t\t\t\t\tif ( this.axis === 'Z' && snap ) this.object.rotation.z = Math.round( this.object.rotation.z / snap ) * snap;\n\n\t\t\t\t}\n\n\t\t\t\tthis.object.updateMatrixWorld();\n\t\t\t\tthis.object.parent.updateMatrixWorld();\n\n\t\t\t\tpositionStart.copy( this.object.position );\n\t\t\t\tquaternionStart.copy( this.object.quaternion );\n\t\t\t\tscaleStart.copy( this.object.scale );\n\n\t\t\t\tthis.object.matrixWorld.decompose( worldPositionStart, worldQuaternionStart, worldScaleStart );\n\n\t\t\t\tpointStart.copy( planeIntersect.point ).sub( worldPositionStart );\n\n\t\t\t}\n\n\t\t\tthis.dragging = true;\n\t\t\tmouseDownEvent.mode = this.mode;\n\t\t\tthis.dispatchEvent( mouseDownEvent );\n\n\t\t}\n\n\t};\n\n\tthis.pointerMove = function ( pointer ) {\n\n\t\tvar axis = this.axis;\n\t\tvar mode = this.mode;\n\t\tvar object = this.object;\n\t\tvar space = this.space;\n\n\t\tif ( mode === 'scale' ) {\n\n\t\t\tspace = 'local';\n\n\t\t} else if ( axis === 'E' || axis === 'XYZE' || axis === 'XYZ' ) {\n\n\t\t\tspace = 'world';\n\n\t\t}\n\n\t\tif ( object === undefined || axis === null || this.dragging === false || pointer.button !== - 1 ) return;\n\n\t\traycaster.setFromCamera( pointer, this.camera );\n\n\t\tvar planeIntersect = intersectObjectWithRay( _plane, raycaster, true );\n\n\t\tif ( ! planeIntersect ) return;\n\n\t\tpointEnd.copy( planeIntersect.point ).sub( worldPositionStart );\n\n\t\tif ( mode === 'translate' ) {\n\n\t\t\t// Apply translate\n\n\t\t\toffset.copy( pointEnd ).sub( pointStart );\n\n\t\t\tif ( space === 'local' && axis !== 'XYZ' ) {\n\n\t\t\t\toffset.applyQuaternion( worldQuaternionInv );\n\n\t\t\t}\n\n\t\t\tif ( axis.indexOf( 'X' ) === - 1 ) offset.x = 0;\n\t\t\tif ( axis.indexOf( 'Y' ) === - 1 ) offset.y = 0;\n\t\t\tif ( axis.indexOf( 'Z' ) === - 1 ) offset.z = 0;\n\n\t\t\tif ( space === 'local' && axis !== 'XYZ' ) {\n\n\t\t\t\toffset.applyQuaternion( quaternionStart ).divide( parentScale );\n\n\t\t\t} else {\n\n\t\t\t\toffset.applyQuaternion( parentQuaternionInv ).divide( parentScale );\n\n\t\t\t}\n\n\t\t\tobject.position.copy( offset ).add( positionStart );\n\n\t\t\t// Apply translation snap\n\n\t\t\tif ( this.translationSnap ) {\n\n\t\t\t\tif ( space === 'local' ) {\n\n\t\t\t\t\tobject.position.applyQuaternion( _tempQuaternion.copy( quaternionStart ).invert() );\n\n\t\t\t\t\tif ( axis.search( 'X' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.x = Math.round( object.position.x / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Y' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.y = Math.round( object.position.y / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Z' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.z = Math.round( object.position.z / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tobject.position.applyQuaternion( quaternionStart );\n\n\t\t\t\t}\n\n\t\t\t\tif ( space === 'world' ) {\n\n\t\t\t\t\tif ( object.parent ) {\n\n\t\t\t\t\t\tobject.position.add( _tempVector.setFromMatrixPosition( object.parent.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'X' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.x = Math.round( object.position.x / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Y' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.y = Math.round( object.position.y / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( axis.search( 'Z' ) !== - 1 ) {\n\n\t\t\t\t\t\tobject.position.z = Math.round( object.position.z / this.translationSnap ) * this.translationSnap;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( object.parent ) {\n\n\t\t\t\t\t\tobject.position.sub( _tempVector.setFromMatrixPosition( object.parent.matrixWorld ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( mode === 'scale' ) {\n\n\t\t\tif ( axis.search( 'XYZ' ) !== - 1 ) {\n\n\t\t\t\tvar d = pointEnd.length() / pointStart.length();\n\n\t\t\t\tif ( pointEnd.dot( pointStart ) < 0 ) d *= - 1;\n\n\t\t\t\t_tempVector2.set( d, d, d );\n\n\t\t\t} else {\n\n\t\t\t\t_tempVector.copy( pointStart );\n\t\t\t\t_tempVector2.copy( pointEnd );\n\n\t\t\t\t_tempVector.applyQuaternion( worldQuaternionInv );\n\t\t\t\t_tempVector2.applyQuaternion( worldQuaternionInv );\n\n\t\t\t\t_tempVector2.divide( _tempVector );\n\n\t\t\t\tif ( axis.search( 'X' ) === - 1 ) {\n\n\t\t\t\t\t_tempVector2.x = 1;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Y' ) === - 1 ) {\n\n\t\t\t\t\t_tempVector2.y = 1;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Z' ) === - 1 ) {\n\n\t\t\t\t\t_tempVector2.z = 1;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Apply scale\n\n\t\t\tobject.scale.copy( scaleStart ).multiply( _tempVector2 );\n\n\t\t\tif ( this.scaleSnap ) {\n\n\t\t\t\tif ( axis.search( 'X' ) !== - 1 ) {\n\n\t\t\t\t\tobject.scale.x = Math.round( object.scale.x / this.scaleSnap ) * this.scaleSnap || this.scaleSnap;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Y' ) !== - 1 ) {\n\n\t\t\t\t\tobject.scale.y = Math.round( object.scale.y / this.scaleSnap ) * this.scaleSnap || this.scaleSnap;\n\n\t\t\t\t}\n\n\t\t\t\tif ( axis.search( 'Z' ) !== - 1 ) {\n\n\t\t\t\t\tobject.scale.z = Math.round( object.scale.z / this.scaleSnap ) * this.scaleSnap || this.scaleSnap;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else if ( mode === 'rotate' ) {\n\n\t\t\toffset.copy( pointEnd ).sub( pointStart );\n\n\t\t\tvar ROTATION_SPEED = 20 / worldPosition.distanceTo( _tempVector.setFromMatrixPosition( this.camera.matrixWorld ) );\n\n\t\t\tif ( axis === 'E' ) {\n\n\t\t\t\trotationAxis.copy( eye );\n\t\t\t\trotationAngle = pointEnd.angleTo( pointStart );\n\n\t\t\t\tstartNorm.copy( pointStart ).normalize();\n\t\t\t\tendNorm.copy( pointEnd ).normalize();\n\n\t\t\t\trotationAngle *= ( endNorm.cross( startNorm ).dot( eye ) < 0 ? 1 : - 1 );\n\n\t\t\t} else if ( axis === 'XYZE' ) {\n\n\t\t\t\trotationAxis.copy( offset ).cross( eye ).normalize();\n\t\t\t\trotationAngle = offset.dot( _tempVector.copy( rotationAxis ).cross( this.eye ) ) * ROTATION_SPEED;\n\n\t\t\t} else if ( axis === 'X' || axis === 'Y' || axis === 'Z' ) {\n\n\t\t\t\trotationAxis.copy( _unit[ axis ] );\n\n\t\t\t\t_tempVector.copy( _unit[ axis ] );\n\n\t\t\t\tif ( space === 'local' ) {\n\n\t\t\t\t\t_tempVector.applyQuaternion( worldQuaternion );\n\n\t\t\t\t}\n\n\t\t\t\trotationAngle = offset.dot( _tempVector.cross( eye ).normalize() ) * ROTATION_SPEED;\n\n\t\t\t}\n\n\t\t\t// Apply rotation snap\n\n\t\t\tif ( this.rotationSnap ) rotationAngle = Math.round( rotationAngle / this.rotationSnap ) * this.rotationSnap;\n\n\t\t\tthis.rotationAngle = rotationAngle;\n\n\t\t\t// Apply rotate\n\t\t\tif ( space === 'local' && axis !== 'E' && axis !== 'XYZE' ) {\n\n\t\t\t\tobject.quaternion.copy( quaternionStart );\n\t\t\t\tobject.quaternion.multiply( _tempQuaternion.setFromAxisAngle( rotationAxis, rotationAngle ) ).normalize();\n\n\t\t\t} else {\n\n\t\t\t\trotationAxis.applyQuaternion( parentQuaternionInv );\n\t\t\t\tobject.quaternion.copy( _tempQuaternion.setFromAxisAngle( rotationAxis, rotationAngle ) );\n\t\t\t\tobject.quaternion.multiply( quaternionStart ).normalize();\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.dispatchEvent( changeEvent );\n\t\tthis.dispatchEvent( objectChangeEvent );\n\n\t};\n\n\tthis.pointerUp = function ( pointer ) {\n\n\t\tif ( pointer.button !== 0 ) return;\n\n\t\tif ( this.dragging && ( this.axis !== null ) ) {\n\n\t\t\tmouseUpEvent.mode = this.mode;\n\t\t\tthis.dispatchEvent( mouseUpEvent );\n\n\t\t}\n\n\t\tthis.dragging = false;\n\t\tthis.axis = null;\n\n\t};\n\n\t// normalize mouse / touch pointer and remap {x,y} to view space.\n\n\tfunction getPointer( event ) {\n\n\t\tif ( scope.domElement.ownerDocument.pointerLockElement ) {\n\n\t\t\treturn {\n\t\t\t\tx: 0,\n\t\t\t\ty: 0,\n\t\t\t\tbutton: event.button\n\t\t\t};\n\n\t\t} else {\n\n\t\t\tvar pointer = event.changedTouches ? event.changedTouches[ 0 ] : event;\n\n\t\t\tvar rect = domElement.getBoundingClientRect();\n\n\t\t\treturn {\n\t\t\t\tx: ( pointer.clientX - rect.left ) / rect.width * 2 - 1,\n\t\t\t\ty: - ( pointer.clientY - rect.top ) / rect.height * 2 + 1,\n\t\t\t\tbutton: event.button\n\t\t\t};\n\n\t\t}\n\n\t}\n\n\t// mouse / touch event handlers\n\n\tfunction onPointerHover( event ) {\n\n\t\tif ( ! scope.enabled ) return;\n\n\t\tswitch ( event.pointerType ) {\n\n\t\t\tcase 'mouse':\n\t\t\tcase 'pen':\n\t\t\t\tscope.pointerHover( getPointer( event ) );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction onPointerDown( event ) {\n\n\t\tif ( ! scope.enabled ) return;\n\n\t\tscope.domElement.style.touchAction = 'none'; // disable touch scroll\n\t\tscope.domElement.ownerDocument.addEventListener( 'pointermove', onPointerMove, false );\n\n\t\tscope.pointerHover( getPointer( event ) );\n\t\tscope.pointerDown( getPointer( event ) );\n\n\t}\n\n\tfunction onPointerMove( event ) {\n\n\t\tif ( ! scope.enabled ) return;\n\n\t\tscope.pointerMove( getPointer( event ) );\n\n\t}\n\n\tfunction onPointerUp( event ) {\n\n\t\tif ( ! scope.enabled ) return;\n\n\t\tscope.domElement.style.touchAction = '';\n\t\tscope.domElement.ownerDocument.removeEventListener( 'pointermove', onPointerMove, false );\n\n\t\tscope.pointerUp( getPointer( event ) );\n\n\t}\n\n\t// TODO: deprecate\n\n\tthis.getMode = function () {\n\n\t\treturn scope.mode;\n\n\t};\n\n\tthis.setMode = function ( mode ) {\n\n\t\tscope.mode = mode;\n\n\t};\n\n\tthis.setTranslationSnap = function ( translationSnap ) {\n\n\t\tscope.translationSnap = translationSnap;\n\n\t};\n\n\tthis.setRotationSnap = function ( rotationSnap ) {\n\n\t\tscope.rotationSnap = rotationSnap;\n\n\t};\n\n\tthis.setScaleSnap = function ( scaleSnap ) {\n\n\t\tscope.scaleSnap = scaleSnap;\n\n\t};\n\n\tthis.setSize = function ( size ) {\n\n\t\tscope.size = size;\n\n\t};\n\n\tthis.setSpace = function ( space ) {\n\n\t\tscope.space = space;\n\n\t};\n\n\tthis.update = function () {\n\n\t\tconsole.warn( 'THREE.TransformControls: update function has no more functionality and therefore has been deprecated.' );\n\n\t};\n\n};\n\nTransformControls.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: TransformControls,\n\n\tisTransformControls: true\n\n} );\n\n\nvar TransformControlsGizmo = function () {\n\n\t'use strict';\n\n\tObject3D.call( this );\n\n\tthis.type = 'TransformControlsGizmo';\n\n\t// shared materials\n\n\tvar gizmoMaterial = new MeshBasicMaterial( {\n\t\tdepthTest: false,\n\t\tdepthWrite: false,\n\t\ttransparent: true,\n\t\tside: DoubleSide,\n\t\tfog: false,\n\t\ttoneMapped: false\n\t} );\n\n\tvar gizmoLineMaterial = new LineBasicMaterial( {\n\t\tdepthTest: false,\n\t\tdepthWrite: false,\n\t\ttransparent: true,\n\t\tlinewidth: 1,\n\t\tfog: false,\n\t\ttoneMapped: false\n\t} );\n\n\t// Make unique material for each axis/color\n\n\tvar matInvisible = gizmoMaterial.clone();\n\tmatInvisible.opacity = 0.15;\n\n\tvar matHelper = gizmoMaterial.clone();\n\tmatHelper.opacity = 0.33;\n\n\tvar matRed = gizmoMaterial.clone();\n\tmatRed.color.set( 0xff0000 );\n\n\tvar matGreen = gizmoMaterial.clone();\n\tmatGreen.color.set( 0x00ff00 );\n\n\tvar matBlue = gizmoMaterial.clone();\n\tmatBlue.color.set( 0x0000ff );\n\n\tvar matWhiteTransparent = gizmoMaterial.clone();\n\tmatWhiteTransparent.opacity = 0.25;\n\n\tvar matYellowTransparent = matWhiteTransparent.clone();\n\tmatYellowTransparent.color.set( 0xffff00 );\n\n\tvar matCyanTransparent = matWhiteTransparent.clone();\n\tmatCyanTransparent.color.set( 0x00ffff );\n\n\tvar matMagentaTransparent = matWhiteTransparent.clone();\n\tmatMagentaTransparent.color.set( 0xff00ff );\n\n\tvar matYellow = gizmoMaterial.clone();\n\tmatYellow.color.set( 0xffff00 );\n\n\tvar matLineRed = gizmoLineMaterial.clone();\n\tmatLineRed.color.set( 0xff0000 );\n\n\tvar matLineGreen = gizmoLineMaterial.clone();\n\tmatLineGreen.color.set( 0x00ff00 );\n\n\tvar matLineBlue = gizmoLineMaterial.clone();\n\tmatLineBlue.color.set( 0x0000ff );\n\n\tvar matLineCyan = gizmoLineMaterial.clone();\n\tmatLineCyan.color.set( 0x00ffff );\n\n\tvar matLineMagenta = gizmoLineMaterial.clone();\n\tmatLineMagenta.color.set( 0xff00ff );\n\n\tvar matLineYellow = gizmoLineMaterial.clone();\n\tmatLineYellow.color.set( 0xffff00 );\n\n\tvar matLineGray = gizmoLineMaterial.clone();\n\tmatLineGray.color.set( 0x787878 );\n\n\tvar matLineYellowTransparent = matLineYellow.clone();\n\tmatLineYellowTransparent.opacity = 0.25;\n\n\t// reusable geometry\n\n\tvar arrowGeometry = new CylinderBufferGeometry( 0, 0.05, 0.2, 12, 1, false );\n\n\tvar scaleHandleGeometry = new BoxBufferGeometry( 0.125, 0.125, 0.125 );\n\n\tvar lineGeometry = new BufferGeometry();\n\tlineGeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0,\t1, 0, 0 ], 3 ) );\n\n\tvar CircleGeometry = function ( radius, arc ) {\n\n\t\tvar geometry = new BufferGeometry( );\n\t\tvar vertices = [];\n\n\t\tfor ( var i = 0; i <= 64 * arc; ++ i ) {\n\n\t\t\tvertices.push( 0, Math.cos( i / 32 * Math.PI ) * radius, Math.sin( i / 32 * Math.PI ) * radius );\n\n\t\t}\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\n\n\t\treturn geometry;\n\n\t};\n\n\t// Special geometry for transform helper. If scaled with position vector it spans from [0,0,0] to position\n\n\tvar TranslateHelperGeometry = function () {\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tgeometry.setAttribute( 'position', new Float32BufferAttribute( [ 0, 0, 0, 1, 1, 1 ], 3 ) );\n\n\t\treturn geometry;\n\n\t};\n\n\t// Gizmo definitions - custom hierarchy definitions for setupGizmo() function\n\n\tvar gizmoTranslate = {\n\t\tX: [\n\t\t\t[ new Mesh( arrowGeometry, matRed ), [ 1, 0, 0 ], [ 0, 0, - Math.PI / 2 ], null, 'fwd' ],\n\t\t\t[ new Mesh( arrowGeometry, matRed ), [ 1, 0, 0 ], [ 0, 0, Math.PI / 2 ], null, 'bwd' ],\n\t\t\t[ new Line( lineGeometry, matLineRed ) ]\n\t\t],\n\t\tY: [\n\t\t\t[ new Mesh( arrowGeometry, matGreen ), [ 0, 1, 0 ], null, null, 'fwd' ],\n\t\t\t[ new Mesh( arrowGeometry, matGreen ), [ 0, 1, 0 ], [ Math.PI, 0, 0 ], null, 'bwd' ],\n\t\t\t[ new Line( lineGeometry, matLineGreen ), null, [ 0, 0, Math.PI / 2 ]]\n\t\t],\n\t\tZ: [\n\t\t\t[ new Mesh( arrowGeometry, matBlue ), [ 0, 0, 1 ], [ Math.PI / 2, 0, 0 ], null, 'fwd' ],\n\t\t\t[ new Mesh( arrowGeometry, matBlue ), [ 0, 0, 1 ], [ - Math.PI / 2, 0, 0 ], null, 'bwd' ],\n\t\t\t[ new Line( lineGeometry, matLineBlue ), null, [ 0, - Math.PI / 2, 0 ]]\n\t\t],\n\t\tXYZ: [\n\t\t\t[ new Mesh( new OctahedronBufferGeometry( 0.1, 0 ), matWhiteTransparent.clone() ), [ 0, 0, 0 ], [ 0, 0, 0 ]]\n\t\t],\n\t\tXY: [\n\t\t\t[ new Mesh( new PlaneBufferGeometry( 0.295, 0.295 ), matYellowTransparent.clone() ), [ 0.15, 0.15, 0 ]],\n\t\t\t[ new Line( lineGeometry, matLineYellow ), [ 0.18, 0.3, 0 ], null, [ 0.125, 1, 1 ]],\n\t\t\t[ new Line( lineGeometry, matLineYellow ), [ 0.3, 0.18, 0 ], [ 0, 0, Math.PI / 2 ], [ 0.125, 1, 1 ]]\n\t\t],\n\t\tYZ: [\n\t\t\t[ new Mesh( new PlaneBufferGeometry( 0.295, 0.295 ), matCyanTransparent.clone() ), [ 0, 0.15, 0.15 ], [ 0, Math.PI / 2, 0 ]],\n\t\t\t[ new Line( lineGeometry, matLineCyan ), [ 0, 0.18, 0.3 ], [ 0, 0, Math.PI / 2 ], [ 0.125, 1, 1 ]],\n\t\t\t[ new Line( lineGeometry, matLineCyan ), [ 0, 0.3, 0.18 ], [ 0, - Math.PI / 2, 0 ], [ 0.125, 1, 1 ]]\n\t\t],\n\t\tXZ: [\n\t\t\t[ new Mesh( new PlaneBufferGeometry( 0.295, 0.295 ), matMagentaTransparent.clone() ), [ 0.15, 0, 0.15 ], [ - Math.PI / 2, 0, 0 ]],\n\t\t\t[ new Line( lineGeometry, matLineMagenta ), [ 0.18, 0, 0.3 ], null, [ 0.125, 1, 1 ]],\n\t\t\t[ new Line( lineGeometry, matLineMagenta ), [ 0.3, 0, 0.18 ], [ 0, - Math.PI / 2, 0 ], [ 0.125, 1, 1 ]]\n\t\t]\n\t};\n\n\tvar pickerTranslate = {\n\t\tX: [\n\t\t\t[ new Mesh( new CylinderBufferGeometry( 0.2, 0, 1, 4, 1, false ), matInvisible ), [ 0.6, 0, 0 ], [ 0, 0, - Math.PI / 2 ]]\n\t\t],\n\t\tY: [\n\t\t\t[ new Mesh( new CylinderBufferGeometry( 0.2, 0, 1, 4, 1, false ), matInvisible ), [ 0, 0.6, 0 ]]\n\t\t],\n\t\tZ: [\n\t\t\t[ new Mesh( new CylinderBufferGeometry( 0.2, 0, 1, 4, 1, false ), matInvisible ), [ 0, 0, 0.6 ], [ Math.PI / 2, 0, 0 ]]\n\t\t],\n\t\tXYZ: [\n\t\t\t[ new Mesh( new OctahedronBufferGeometry( 0.2, 0 ), matInvisible ) ]\n\t\t],\n\t\tXY: [\n\t\t\t[ new Mesh( new PlaneBufferGeometry( 0.4, 0.4 ), matInvisible ), [ 0.2, 0.2, 0 ]]\n\t\t],\n\t\tYZ: [\n\t\t\t[ new Mesh( new PlaneBufferGeometry( 0.4, 0.4 ), matInvisible ), [ 0, 0.2, 0.2 ], [ 0, Math.PI / 2, 0 ]]\n\t\t],\n\t\tXZ: [\n\t\t\t[ new Mesh( new PlaneBufferGeometry( 0.4, 0.4 ), matInvisible ), [ 0.2, 0, 0.2 ], [ - Math.PI / 2, 0, 0 ]]\n\t\t]\n\t};\n\n\tvar helperTranslate = {\n\t\tSTART: [\n\t\t\t[ new Mesh( new OctahedronBufferGeometry( 0.01, 2 ), matHelper ), null, null, null, 'helper' ]\n\t\t],\n\t\tEND: [\n\t\t\t[ new Mesh( new OctahedronBufferGeometry( 0.01, 2 ), matHelper ), null, null, null, 'helper' ]\n\t\t],\n\t\tDELTA: [\n\t\t\t[ new Line( TranslateHelperGeometry(), matHelper ), null, null, null, 'helper' ]\n\t\t],\n\t\tX: [\n\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]\n\t\t],\n\t\tY: [\n\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, - 1e3, 0 ], [ 0, 0, Math.PI / 2 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t],\n\t\tZ: [\n\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, 0, - 1e3 ], [ 0, - Math.PI / 2, 0 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t]\n\t};\n\n\tvar gizmoRotate = {\n\t\tX: [\n\t\t\t[ new Line( CircleGeometry( 1, 0.5 ), matLineRed ) ],\n\t\t\t[ new Mesh( new OctahedronBufferGeometry( 0.04, 0 ), matRed ), [ 0, 0, 0.99 ], null, [ 1, 3, 1 ]],\n\t\t],\n\t\tY: [\n\t\t\t[ new Line( CircleGeometry( 1, 0.5 ), matLineGreen ), null, [ 0, 0, - Math.PI / 2 ]],\n\t\t\t[ new Mesh( new OctahedronBufferGeometry( 0.04, 0 ), matGreen ), [ 0, 0, 0.99 ], null, [ 3, 1, 1 ]],\n\t\t],\n\t\tZ: [\n\t\t\t[ new Line( CircleGeometry( 1, 0.5 ), matLineBlue ), null, [ 0, Math.PI / 2, 0 ]],\n\t\t\t[ new Mesh( new OctahedronBufferGeometry( 0.04, 0 ), matBlue ), [ 0.99, 0, 0 ], null, [ 1, 3, 1 ]],\n\t\t],\n\t\tE: [\n\t\t\t[ new Line( CircleGeometry( 1.25, 1 ), matLineYellowTransparent ), null, [ 0, Math.PI / 2, 0 ]],\n\t\t\t[ new Mesh( new CylinderBufferGeometry( 0.03, 0, 0.15, 4, 1, false ), matLineYellowTransparent ), [ 1.17, 0, 0 ], [ 0, 0, - Math.PI / 2 ], [ 1, 1, 0.001 ]],\n\t\t\t[ new Mesh( new CylinderBufferGeometry( 0.03, 0, 0.15, 4, 1, false ), matLineYellowTransparent ), [ - 1.17, 0, 0 ], [ 0, 0, Math.PI / 2 ], [ 1, 1, 0.001 ]],\n\t\t\t[ new Mesh( new CylinderBufferGeometry( 0.03, 0, 0.15, 4, 1, false ), matLineYellowTransparent ), [ 0, - 1.17, 0 ], [ Math.PI, 0, 0 ], [ 1, 1, 0.001 ]],\n\t\t\t[ new Mesh( new CylinderBufferGeometry( 0.03, 0, 0.15, 4, 1, false ), matLineYellowTransparent ), [ 0, 1.17, 0 ], [ 0, 0, 0 ], [ 1, 1, 0.001 ]],\n\t\t],\n\t\tXYZE: [\n\t\t\t[ new Line( CircleGeometry( 1, 1 ), matLineGray ), null, [ 0, Math.PI / 2, 0 ]]\n\t\t]\n\t};\n\n\tvar helperRotate = {\n\t\tAXIS: [\n\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]\n\t\t]\n\t};\n\n\tvar pickerRotate = {\n\t\tX: [\n\t\t\t[ new Mesh( new TorusBufferGeometry( 1, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ 0, - Math.PI / 2, - Math.PI / 2 ]],\n\t\t],\n\t\tY: [\n\t\t\t[ new Mesh( new TorusBufferGeometry( 1, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ Math.PI / 2, 0, 0 ]],\n\t\t],\n\t\tZ: [\n\t\t\t[ new Mesh( new TorusBufferGeometry( 1, 0.1, 4, 24 ), matInvisible ), [ 0, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t],\n\t\tE: [\n\t\t\t[ new Mesh( new TorusBufferGeometry( 1.25, 0.1, 2, 24 ), matInvisible ) ]\n\t\t],\n\t\tXYZE: [\n\t\t\t[ new Mesh( new SphereBufferGeometry( 0.7, 10, 8 ), matInvisible ) ]\n\t\t]\n\t};\n\n\tvar gizmoScale = {\n\t\tX: [\n\t\t\t[ new Mesh( scaleHandleGeometry, matRed ), [ 0.8, 0, 0 ], [ 0, 0, - Math.PI / 2 ]],\n\t\t\t[ new Line( lineGeometry, matLineRed ), null, null, [ 0.8, 1, 1 ]]\n\t\t],\n\t\tY: [\n\t\t\t[ new Mesh( scaleHandleGeometry, matGreen ), [ 0, 0.8, 0 ]],\n\t\t\t[ new Line( lineGeometry, matLineGreen ), null, [ 0, 0, Math.PI / 2 ], [ 0.8, 1, 1 ]]\n\t\t],\n\t\tZ: [\n\t\t\t[ new Mesh( scaleHandleGeometry, matBlue ), [ 0, 0, 0.8 ], [ Math.PI / 2, 0, 0 ]],\n\t\t\t[ new Line( lineGeometry, matLineBlue ), null, [ 0, - Math.PI / 2, 0 ], [ 0.8, 1, 1 ]]\n\t\t],\n\t\tXY: [\n\t\t\t[ new Mesh( scaleHandleGeometry, matYellowTransparent ), [ 0.85, 0.85, 0 ], null, [ 2, 2, 0.2 ]],\n\t\t\t[ new Line( lineGeometry, matLineYellow ), [ 0.855, 0.98, 0 ], null, [ 0.125, 1, 1 ]],\n\t\t\t[ new Line( lineGeometry, matLineYellow ), [ 0.98, 0.855, 0 ], [ 0, 0, Math.PI / 2 ], [ 0.125, 1, 1 ]]\n\t\t],\n\t\tYZ: [\n\t\t\t[ new Mesh( scaleHandleGeometry, matCyanTransparent ), [ 0, 0.85, 0.85 ], null, [ 0.2, 2, 2 ]],\n\t\t\t[ new Line( lineGeometry, matLineCyan ), [ 0, 0.855, 0.98 ], [ 0, 0, Math.PI / 2 ], [ 0.125, 1, 1 ]],\n\t\t\t[ new Line( lineGeometry, matLineCyan ), [ 0, 0.98, 0.855 ], [ 0, - Math.PI / 2, 0 ], [ 0.125, 1, 1 ]]\n\t\t],\n\t\tXZ: [\n\t\t\t[ new Mesh( scaleHandleGeometry, matMagentaTransparent ), [ 0.85, 0, 0.85 ], null, [ 2, 0.2, 2 ]],\n\t\t\t[ new Line( lineGeometry, matLineMagenta ), [ 0.855, 0, 0.98 ], null, [ 0.125, 1, 1 ]],\n\t\t\t[ new Line( lineGeometry, matLineMagenta ), [ 0.98, 0, 0.855 ], [ 0, - Math.PI / 2, 0 ], [ 0.125, 1, 1 ]]\n\t\t],\n\t\tXYZX: [\n\t\t\t[ new Mesh( new BoxBufferGeometry( 0.125, 0.125, 0.125 ), matWhiteTransparent.clone() ), [ 1.1, 0, 0 ]],\n\t\t],\n\t\tXYZY: [\n\t\t\t[ new Mesh( new BoxBufferGeometry( 0.125, 0.125, 0.125 ), matWhiteTransparent.clone() ), [ 0, 1.1, 0 ]],\n\t\t],\n\t\tXYZZ: [\n\t\t\t[ new Mesh( new BoxBufferGeometry( 0.125, 0.125, 0.125 ), matWhiteTransparent.clone() ), [ 0, 0, 1.1 ]],\n\t\t]\n\t};\n\n\tvar pickerScale = {\n\t\tX: [\n\t\t\t[ new Mesh( new CylinderBufferGeometry( 0.2, 0, 0.8, 4, 1, false ), matInvisible ), [ 0.5, 0, 0 ], [ 0, 0, - Math.PI / 2 ]]\n\t\t],\n\t\tY: [\n\t\t\t[ new Mesh( new CylinderBufferGeometry( 0.2, 0, 0.8, 4, 1, false ), matInvisible ), [ 0, 0.5, 0 ]]\n\t\t],\n\t\tZ: [\n\t\t\t[ new Mesh( new CylinderBufferGeometry( 0.2, 0, 0.8, 4, 1, false ), matInvisible ), [ 0, 0, 0.5 ], [ Math.PI / 2, 0, 0 ]]\n\t\t],\n\t\tXY: [\n\t\t\t[ new Mesh( scaleHandleGeometry, matInvisible ), [ 0.85, 0.85, 0 ], null, [ 3, 3, 0.2 ]],\n\t\t],\n\t\tYZ: [\n\t\t\t[ new Mesh( scaleHandleGeometry, matInvisible ), [ 0, 0.85, 0.85 ], null, [ 0.2, 3, 3 ]],\n\t\t],\n\t\tXZ: [\n\t\t\t[ new Mesh( scaleHandleGeometry, matInvisible ), [ 0.85, 0, 0.85 ], null, [ 3, 0.2, 3 ]],\n\t\t],\n\t\tXYZX: [\n\t\t\t[ new Mesh( new BoxBufferGeometry( 0.2, 0.2, 0.2 ), matInvisible ), [ 1.1, 0, 0 ]],\n\t\t],\n\t\tXYZY: [\n\t\t\t[ new Mesh( new BoxBufferGeometry( 0.2, 0.2, 0.2 ), matInvisible ), [ 0, 1.1, 0 ]],\n\t\t],\n\t\tXYZZ: [\n\t\t\t[ new Mesh( new BoxBufferGeometry( 0.2, 0.2, 0.2 ), matInvisible ), [ 0, 0, 1.1 ]],\n\t\t]\n\t};\n\n\tvar helperScale = {\n\t\tX: [\n\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ - 1e3, 0, 0 ], null, [ 1e6, 1, 1 ], 'helper' ]\n\t\t],\n\t\tY: [\n\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, - 1e3, 0 ], [ 0, 0, Math.PI / 2 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t],\n\t\tZ: [\n\t\t\t[ new Line( lineGeometry, matHelper.clone() ), [ 0, 0, - 1e3 ], [ 0, - Math.PI / 2, 0 ], [ 1e6, 1, 1 ], 'helper' ]\n\t\t]\n\t};\n\n\t// Creates an Object3D with gizmos described in custom hierarchy definition.\n\n\tvar setupGizmo = function ( gizmoMap ) {\n\n\t\tvar gizmo = new Object3D();\n\n\t\tfor ( var name in gizmoMap ) {\n\n\t\t\tfor ( var i = gizmoMap[ name ].length; i --; ) {\n\n\t\t\t\tvar object = gizmoMap[ name ][ i ][ 0 ].clone();\n\t\t\t\tvar position = gizmoMap[ name ][ i ][ 1 ];\n\t\t\t\tvar rotation = gizmoMap[ name ][ i ][ 2 ];\n\t\t\t\tvar scale = gizmoMap[ name ][ i ][ 3 ];\n\t\t\t\tvar tag = gizmoMap[ name ][ i ][ 4 ];\n\n\t\t\t\t// name and tag properties are essential for picking and updating logic.\n\t\t\t\tobject.name = name;\n\t\t\t\tobject.tag = tag;\n\n\t\t\t\tif ( position ) {\n\n\t\t\t\t\tobject.position.set( position[ 0 ], position[ 1 ], position[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( rotation ) {\n\n\t\t\t\t\tobject.rotation.set( rotation[ 0 ], rotation[ 1 ], rotation[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scale ) {\n\n\t\t\t\t\tobject.scale.set( scale[ 0 ], scale[ 1 ], scale[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tobject.updateMatrix();\n\n\t\t\t\tvar tempGeometry = object.geometry.clone();\n\t\t\t\ttempGeometry.applyMatrix4( object.matrix );\n\t\t\t\tobject.geometry = tempGeometry;\n\t\t\t\tobject.renderOrder = Infinity;\n\n\t\t\t\tobject.position.set( 0, 0, 0 );\n\t\t\t\tobject.rotation.set( 0, 0, 0 );\n\t\t\t\tobject.scale.set( 1, 1, 1 );\n\n\t\t\t\tgizmo.add( object );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn gizmo;\n\n\t};\n\n\t// Reusable utility variables\n\n\tvar tempVector = new Vector3( 0, 0, 0 );\n\tvar tempEuler = new Euler();\n\tvar alignVector = new Vector3( 0, 1, 0 );\n\tvar zeroVector = new Vector3( 0, 0, 0 );\n\tvar lookAtMatrix = new Matrix4();\n\tvar tempQuaternion = new Quaternion();\n\tvar tempQuaternion2 = new Quaternion();\n\tvar identityQuaternion = new Quaternion();\n\n\tvar unitX = new Vector3( 1, 0, 0 );\n\tvar unitY = new Vector3( 0, 1, 0 );\n\tvar unitZ = new Vector3( 0, 0, 1 );\n\n\t// Gizmo creation\n\n\tthis.gizmo = {};\n\tthis.picker = {};\n\tthis.helper = {};\n\n\tthis.add( this.gizmo[ 'translate' ] = setupGizmo( gizmoTranslate ) );\n\tthis.add( this.gizmo[ 'rotate' ] = setupGizmo( gizmoRotate ) );\n\tthis.add( this.gizmo[ 'scale' ] = setupGizmo( gizmoScale ) );\n\tthis.add( this.picker[ 'translate' ] = setupGizmo( pickerTranslate ) );\n\tthis.add( this.picker[ 'rotate' ] = setupGizmo( pickerRotate ) );\n\tthis.add( this.picker[ 'scale' ] = setupGizmo( pickerScale ) );\n\tthis.add( this.helper[ 'translate' ] = setupGizmo( helperTranslate ) );\n\tthis.add( this.helper[ 'rotate' ] = setupGizmo( helperRotate ) );\n\tthis.add( this.helper[ 'scale' ] = setupGizmo( helperScale ) );\n\n\t// Pickers should be hidden always\n\n\tthis.picker[ 'translate' ].visible = false;\n\tthis.picker[ 'rotate' ].visible = false;\n\tthis.picker[ 'scale' ].visible = false;\n\n\t// updateMatrixWorld will update transformations and appearance of individual handles\n\n\tthis.updateMatrixWorld = function () {\n\n\t\tvar space = this.space;\n\n\t\tif ( this.mode === 'scale' ) space = 'local'; // scale always oriented to local rotation\n\n\t\tvar quaternion = space === 'local' ? this.worldQuaternion : identityQuaternion;\n\n\t\t// Show only gizmos for current transform mode\n\n\t\tthis.gizmo[ 'translate' ].visible = this.mode === 'translate';\n\t\tthis.gizmo[ 'rotate' ].visible = this.mode === 'rotate';\n\t\tthis.gizmo[ 'scale' ].visible = this.mode === 'scale';\n\n\t\tthis.helper[ 'translate' ].visible = this.mode === 'translate';\n\t\tthis.helper[ 'rotate' ].visible = this.mode === 'rotate';\n\t\tthis.helper[ 'scale' ].visible = this.mode === 'scale';\n\n\n\t\tvar handles = [];\n\t\thandles = handles.concat( this.picker[ this.mode ].children );\n\t\thandles = handles.concat( this.gizmo[ this.mode ].children );\n\t\thandles = handles.concat( this.helper[ this.mode ].children );\n\n\t\tfor ( var i = 0; i < handles.length; i ++ ) {\n\n\t\t\tvar handle = handles[ i ];\n\n\t\t\t// hide aligned to camera\n\n\t\t\thandle.visible = true;\n\t\t\thandle.rotation.set( 0, 0, 0 );\n\t\t\thandle.position.copy( this.worldPosition );\n\n\t\t\tvar factor;\n\n\t\t\tif ( this.camera.isOrthographicCamera ) {\n\n\t\t\t\tfactor = ( this.camera.top - this.camera.bottom ) / this.camera.zoom;\n\n\t\t\t} else {\n\n\t\t\t\tfactor = this.worldPosition.distanceTo( this.cameraPosition ) * Math.min( 1.9 * Math.tan( Math.PI * this.camera.fov / 360 ) / this.camera.zoom, 7 );\n\n\t\t\t}\n\n\t\t\thandle.scale.set( 1, 1, 1 ).multiplyScalar( factor * this.size / 7 );\n\n\t\t\t// TODO: simplify helpers and consider decoupling from gizmo\n\n\t\t\tif ( handle.tag === 'helper' ) {\n\n\t\t\t\thandle.visible = false;\n\n\t\t\t\tif ( handle.name === 'AXIS' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\t\t\t\t\thandle.visible = !! this.axis;\n\n\t\t\t\t\tif ( this.axis === 'X' ) {\n\n\t\t\t\t\t\ttempQuaternion.setFromEuler( tempEuler.set( 0, 0, 0 ) );\n\t\t\t\t\t\thandle.quaternion.copy( quaternion ).multiply( tempQuaternion );\n\n\t\t\t\t\t\tif ( Math.abs( alignVector.copy( unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'Y' ) {\n\n\t\t\t\t\t\ttempQuaternion.setFromEuler( tempEuler.set( 0, 0, Math.PI / 2 ) );\n\t\t\t\t\t\thandle.quaternion.copy( quaternion ).multiply( tempQuaternion );\n\n\t\t\t\t\t\tif ( Math.abs( alignVector.copy( unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'Z' ) {\n\n\t\t\t\t\t\ttempQuaternion.setFromEuler( tempEuler.set( 0, Math.PI / 2, 0 ) );\n\t\t\t\t\t\thandle.quaternion.copy( quaternion ).multiply( tempQuaternion );\n\n\t\t\t\t\t\tif ( Math.abs( alignVector.copy( unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) > 0.9 ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'XYZE' ) {\n\n\t\t\t\t\t\ttempQuaternion.setFromEuler( tempEuler.set( 0, Math.PI / 2, 0 ) );\n\t\t\t\t\t\talignVector.copy( this.rotationAxis );\n\t\t\t\t\t\thandle.quaternion.setFromRotationMatrix( lookAtMatrix.lookAt( zeroVector, alignVector, unitY ) );\n\t\t\t\t\t\thandle.quaternion.multiply( tempQuaternion );\n\t\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis === 'E' ) {\n\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\n\t\t\t\t} else if ( handle.name === 'START' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t} else if ( handle.name === 'END' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPosition );\n\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t} else if ( handle.name === 'DELTA' ) {\n\n\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\t\t\t\t\thandle.quaternion.copy( this.worldQuaternionStart );\n\t\t\t\t\ttempVector.set( 1e-10, 1e-10, 1e-10 ).add( this.worldPositionStart ).sub( this.worldPosition ).multiplyScalar( - 1 );\n\t\t\t\t\ttempVector.applyQuaternion( this.worldQuaternionStart.clone().invert() );\n\t\t\t\t\thandle.scale.copy( tempVector );\n\t\t\t\t\thandle.visible = this.dragging;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thandle.quaternion.copy( quaternion );\n\n\t\t\t\t\tif ( this.dragging ) {\n\n\t\t\t\t\t\thandle.position.copy( this.worldPositionStart );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\thandle.position.copy( this.worldPosition );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.axis ) {\n\n\t\t\t\t\t\thandle.visible = this.axis.search( handle.name ) !== - 1;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// If updating helper, skip rest of the loop\n\t\t\t\tcontinue;\n\n\t\t\t}\n\n\t\t\t// Align handles to current local or world rotation\n\n\t\t\thandle.quaternion.copy( quaternion );\n\n\t\t\tif ( this.mode === 'translate' || this.mode === 'scale' ) {\n\n\t\t\t\t// Hide translate and scale axis facing the camera\n\n\t\t\t\tvar AXIS_HIDE_TRESHOLD = 0.99;\n\t\t\t\tvar PLANE_HIDE_TRESHOLD = 0.2;\n\t\t\t\tvar AXIS_FLIP_TRESHOLD = 0.0;\n\n\n\t\t\t\tif ( handle.name === 'X' || handle.name === 'XYZX' ) {\n\n\t\t\t\t\tif ( Math.abs( alignVector.copy( unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_TRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Y' || handle.name === 'XYZY' ) {\n\n\t\t\t\t\tif ( Math.abs( alignVector.copy( unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_TRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Z' || handle.name === 'XYZZ' ) {\n\n\t\t\t\t\tif ( Math.abs( alignVector.copy( unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) > AXIS_HIDE_TRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'XY' ) {\n\n\t\t\t\t\tif ( Math.abs( alignVector.copy( unitZ ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_TRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'YZ' ) {\n\n\t\t\t\t\tif ( Math.abs( alignVector.copy( unitX ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_TRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'XZ' ) {\n\n\t\t\t\t\tif ( Math.abs( alignVector.copy( unitY ).applyQuaternion( quaternion ).dot( this.eye ) ) < PLANE_HIDE_TRESHOLD ) {\n\n\t\t\t\t\t\thandle.scale.set( 1e-10, 1e-10, 1e-10 );\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// Flip translate and scale axis ocluded behind another axis\n\n\t\t\t\tif ( handle.name.search( 'X' ) !== - 1 ) {\n\n\t\t\t\t\tif ( alignVector.copy( unitX ).applyQuaternion( quaternion ).dot( this.eye ) < AXIS_FLIP_TRESHOLD ) {\n\n\t\t\t\t\t\tif ( handle.tag === 'fwd' ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\thandle.scale.x *= - 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( handle.tag === 'bwd' ) {\n\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name.search( 'Y' ) !== - 1 ) {\n\n\t\t\t\t\tif ( alignVector.copy( unitY ).applyQuaternion( quaternion ).dot( this.eye ) < AXIS_FLIP_TRESHOLD ) {\n\n\t\t\t\t\t\tif ( handle.tag === 'fwd' ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\thandle.scale.y *= - 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( handle.tag === 'bwd' ) {\n\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name.search( 'Z' ) !== - 1 ) {\n\n\t\t\t\t\tif ( alignVector.copy( unitZ ).applyQuaternion( quaternion ).dot( this.eye ) < AXIS_FLIP_TRESHOLD ) {\n\n\t\t\t\t\t\tif ( handle.tag === 'fwd' ) {\n\n\t\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\thandle.scale.z *= - 1;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( handle.tag === 'bwd' ) {\n\n\t\t\t\t\t\thandle.visible = false;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( this.mode === 'rotate' ) {\n\n\t\t\t\t// Align handles to current local or world rotation\n\n\t\t\t\ttempQuaternion2.copy( quaternion );\n\t\t\t\talignVector.copy( this.eye ).applyQuaternion( tempQuaternion.copy( quaternion ).invert() );\n\n\t\t\t\tif ( handle.name.search( 'E' ) !== - 1 ) {\n\n\t\t\t\t\thandle.quaternion.setFromRotationMatrix( lookAtMatrix.lookAt( this.eye, zeroVector, unitY ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'X' ) {\n\n\t\t\t\t\ttempQuaternion.setFromAxisAngle( unitX, Math.atan2( - alignVector.y, alignVector.z ) );\n\t\t\t\t\ttempQuaternion.multiplyQuaternions( tempQuaternion2, tempQuaternion );\n\t\t\t\t\thandle.quaternion.copy( tempQuaternion );\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Y' ) {\n\n\t\t\t\t\ttempQuaternion.setFromAxisAngle( unitY, Math.atan2( alignVector.x, alignVector.z ) );\n\t\t\t\t\ttempQuaternion.multiplyQuaternions( tempQuaternion2, tempQuaternion );\n\t\t\t\t\thandle.quaternion.copy( tempQuaternion );\n\n\t\t\t\t}\n\n\t\t\t\tif ( handle.name === 'Z' ) {\n\n\t\t\t\t\ttempQuaternion.setFromAxisAngle( unitZ, Math.atan2( alignVector.y, alignVector.x ) );\n\t\t\t\t\ttempQuaternion.multiplyQuaternions( tempQuaternion2, tempQuaternion );\n\t\t\t\t\thandle.quaternion.copy( tempQuaternion );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Hide disabled axes\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'X' ) === - 1 || this.showX );\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'Y' ) === - 1 || this.showY );\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'Z' ) === - 1 || this.showZ );\n\t\t\thandle.visible = handle.visible && ( handle.name.indexOf( 'E' ) === - 1 || ( this.showX && this.showY && this.showZ ) );\n\n\t\t\t// highlight selected axis\n\n\t\t\thandle.material._opacity = handle.material._opacity || handle.material.opacity;\n\t\t\thandle.material._color = handle.material._color || handle.material.color.clone();\n\n\t\t\thandle.material.color.copy( handle.material._color );\n\t\t\thandle.material.opacity = handle.material._opacity;\n\n\t\t\tif ( ! this.enabled ) {\n\n\t\t\t\thandle.material.opacity *= 0.5;\n\t\t\t\thandle.material.color.lerp( new Color( 1, 1, 1 ), 0.5 );\n\n\t\t\t} else if ( this.axis ) {\n\n\t\t\t\tif ( handle.name === this.axis ) {\n\n\t\t\t\t\thandle.material.opacity = 1.0;\n\t\t\t\t\thandle.material.color.lerp( new Color( 1, 1, 1 ), 0.5 );\n\n\t\t\t\t} else if ( this.axis.split( '' ).some( function ( a ) {\n\n\t\t\t\t\treturn handle.name === a;\n\n\t\t\t\t} ) ) {\n\n\t\t\t\t\thandle.material.opacity = 1.0;\n\t\t\t\t\thandle.material.color.lerp( new Color( 1, 1, 1 ), 0.5 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\thandle.material.opacity *= 0.25;\n\t\t\t\t\thandle.material.color.lerp( new Color( 1, 1, 1 ), 0.5 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this );\n\n\t};\n\n};\n\nTransformControlsGizmo.prototype = Object.assign( Object.create( Object3D.prototype ), {\n\n\tconstructor: TransformControlsGizmo,\n\n\tisTransformControlsGizmo: true\n\n} );\n\n\nvar TransformControlsPlane = function () {\n\n\t'use strict';\n\n\tMesh.call( this,\n\t\tnew PlaneBufferGeometry( 100000, 100000, 2, 2 ),\n\t\tnew MeshBasicMaterial( { visible: false, wireframe: true, side: DoubleSide, transparent: true, opacity: 0.1, toneMapped: false } )\n\t);\n\n\tthis.type = 'TransformControlsPlane';\n\n\tvar unitX = new Vector3( 1, 0, 0 );\n\tvar unitY = new Vector3( 0, 1, 0 );\n\tvar unitZ = new Vector3( 0, 0, 1 );\n\n\tvar tempVector = new Vector3();\n\tvar dirVector = new Vector3();\n\tvar alignVector = new Vector3();\n\tvar tempMatrix = new Matrix4();\n\tvar identityQuaternion = new Quaternion();\n\n\tthis.updateMatrixWorld = function () {\n\n\t\tvar space = this.space;\n\n\t\tthis.position.copy( this.worldPosition );\n\n\t\tif ( this.mode === 'scale' ) space = 'local'; // scale always oriented to local rotation\n\n\t\tunitX.set( 1, 0, 0 ).applyQuaternion( space === 'local' ? this.worldQuaternion : identityQuaternion );\n\t\tunitY.set( 0, 1, 0 ).applyQuaternion( space === 'local' ? this.worldQuaternion : identityQuaternion );\n\t\tunitZ.set( 0, 0, 1 ).applyQuaternion( space === 'local' ? this.worldQuaternion : identityQuaternion );\n\n\t\t// Align the plane for current transform mode, axis and space.\n\n\t\talignVector.copy( unitY );\n\n\t\tswitch ( this.mode ) {\n\n\t\t\tcase 'translate':\n\t\t\tcase 'scale':\n\t\t\t\tswitch ( this.axis ) {\n\n\t\t\t\t\tcase 'X':\n\t\t\t\t\t\talignVector.copy( this.eye ).cross( unitX );\n\t\t\t\t\t\tdirVector.copy( unitX ).cross( alignVector );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Y':\n\t\t\t\t\t\talignVector.copy( this.eye ).cross( unitY );\n\t\t\t\t\t\tdirVector.copy( unitY ).cross( alignVector );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'Z':\n\t\t\t\t\t\talignVector.copy( this.eye ).cross( unitZ );\n\t\t\t\t\t\tdirVector.copy( unitZ ).cross( alignVector );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'XY':\n\t\t\t\t\t\tdirVector.copy( unitZ );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'YZ':\n\t\t\t\t\t\tdirVector.copy( unitX );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'XZ':\n\t\t\t\t\t\talignVector.copy( unitZ );\n\t\t\t\t\t\tdirVector.copy( unitY );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'XYZ':\n\t\t\t\t\tcase 'E':\n\t\t\t\t\t\tdirVector.set( 0, 0, 0 );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\tcase 'rotate':\n\t\t\tdefault:\n\t\t\t\t// special case for rotate\n\t\t\t\tdirVector.set( 0, 0, 0 );\n\n\t\t}\n\n\t\tif ( dirVector.length() === 0 ) {\n\n\t\t\t// If in rotate mode, make the plane parallel to camera\n\t\t\tthis.quaternion.copy( this.cameraQuaternion );\n\n\t\t} else {\n\n\t\t\ttempMatrix.lookAt( tempVector.set( 0, 0, 0 ), dirVector, alignVector );\n\n\t\t\tthis.quaternion.setFromRotationMatrix( tempMatrix );\n\n\t\t}\n\n\t\tObject3D.prototype.updateMatrixWorld.call( this );\n\n\t};\n\n};\n\nTransformControlsPlane.prototype = Object.assign( Object.create( Mesh.prototype ), {\n\n\tconstructor: TransformControlsPlane,\n\n\tisTransformControlsPlane: true\n\n} );\n\nexport { TransformControls, TransformControlsGizmo, TransformControlsPlane };\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/three/examples/jsm/controls/TransformControls.js\n// module id = null\n// module chunks = ","<template>\r\n    <div class=\"wrap\">\r\n        <div class=\"webglDom\" ref=\"webglDom\"></div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\"\r\nimport { TransformControls } from 'three/examples/jsm/controls/TransformControls';\r\n\r\nimport TWEEN from \"tween.js\";\r\nconst ThreeBSP = require('three-js-csg')(THREE)\r\n\r\nexport default {\r\n    name: 'RunBox',\r\n    data(){\r\n        return {\r\n            width: 0,\r\n            height: 0,\r\n            scene: null,\r\n            camera: null,\r\n            controls: null,\r\n            renderer: null,\r\n            isOpenDoor: true,\r\n            amdLight: null,\r\n            dirLight: null,\r\n            ponLight: null,\r\n            formControls: null,\r\n            line: null,\r\n            // 鼠标位置\r\n            raycaster: '',\r\n            mouse: '',\r\n            dummy: '',\r\n\r\n            curve: null,\r\n            loopTime: 10 * 1000,\r\n            runBox: null,\r\n            cubeList: [],\r\n        }\r\n    },\r\n    methods: {\r\n        // 场景\r\n        initScene(){\r\n            // 初始化画布宽高\r\n            const container = this.$refs.webglDom;\r\n            this.width = container.offsetWidth;\r\n            this.height = container.offsetHeight;\r\n            this.scene = new THREE.Scene();\r\n            this.scene.fog = new THREE.Fog(0x005577, 1, 2800)\r\n            this.scene.background = new THREE.Color( 0x000000 );\r\n            this.raycaster = new THREE.Raycaster();\r\n            this.mouse = new THREE.Vector2();\r\n            this.dummy = new THREE.Object3D();\r\n        },\r\n        // 相机\r\n        initCamera(){\r\n            this.camera = new THREE.PerspectiveCamera(45, this.width / this.height, 0.01, 10000);\r\n            this.camera.position.set(0, 0, 800);\r\n            this.add(this.camera);\r\n            this.camera.lookAt(this.scene.position);\r\n        },\r\n        // 控制器\r\n        initControls(){\r\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement);\r\n        },\r\n        // 添加灯光\r\n        initLight(){\r\n            this.amdLight = new THREE.AmbientLight('#aaa');\r\n\t\t\tthis.dirLight = new THREE.DirectionalLight('#aaa')\r\n\t\t\tthis.ponLight = new THREE.PointLight('#aaa')\r\n\t\t\tthis.amdLight.position.set( 0, 0, 0 )\r\n\t\t\tthis.dirLight.position.set( 0, 0, 0 )\r\n            this.ponLight.position.set( 0, 0, 0 )\r\n\t\t\tthis.add(this.amdLight);\t\t    // 环境光\r\n\t\t\tthis.add(this.dirLight);\t\t    // 方向光\r\n\t\t\tthis.add(this.ponLight);\t\t\t// 点光源\r\n        },\r\n        // 渲染器\r\n        initRenderer(){\r\n            this.renderer = new THREE.WebGLRenderer({\r\n                antialias: true,\r\n                alpha: true,\r\n            })\r\n            this.renderer.setClearColor(0x4682B4,1.0);\r\n            this.renderer.setClearAlpha(0);\r\n            this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\r\n            this.renderer.setSize(this.width, this.height);\r\n            // 开启阴影支持\r\n            this.renderer.shadowMap.enabled = true;\r\n            // 阴影类型\r\n            this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;\r\n            this.$refs.webglDom.appendChild(this.renderer.domElement);\r\n\r\n            // \r\n            this.formControls = new TransformControls(this.camera, this.renderer.domElement)\r\n            const mouse = new THREE.Vector2();\r\n            this.renderer.domElement.addEventListener('click', (event) => {\r\n                mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\r\n                mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\r\n            }, false);\r\n\r\n            // 方块点击检测\r\n            const rayCaster = new THREE.Raycaster();\r\n            rayCaster.setFromCamera(mouse, this.camera);\r\n            const intersects = rayCaster.intersectObjects(this.cubeList);\r\n            console.log(intersects)\r\n            if (intersects.length) {\r\n                intersects.forEach(v => {\r\n                    this.formControls.attach(v.object); // 绑定controls和方块\r\n                    this.add(this.formControls);\r\n                })\r\n                // const target = intersects[0].object;\r\n            }\r\n\r\n            // 修改曲线后同步修改实体线条\r\n            this.formControls.addEventListener('dragging-changed', (event) => {\r\n                if (!event.value) {\r\n                    const points = this.curve.getPoints(50);\r\n                    this.line.geometry.setFromPoints(points);\r\n                }\r\n            });\r\n\r\n            this.render();\r\n        },\r\n        // 创建模型\r\n        initScreen(){\r\n            const initialPoints = [\r\n                { x: 100, y: 50, z: -100 },\r\n                { x: 100, y: -50, z: 100 },\r\n                { x: -100, y: 0, z: 100 },\r\n                { x: -100, y: 0, z: -100 }\r\n            ];\r\n            this.cubeList = initialPoints.map(v => {\r\n                return this.addBox(10, 10, 10, '#fff', v.x, v.y, v.z);\r\n            });\r\n            this.curve = new THREE.CatmullRomCurve3(\r\n                this.cubeList.map((cube) => cube.position) // 直接绑定方块的position以便后续用方块调整曲线\r\n            );\r\n            this.curve.curveType = 'chordal'; // 曲线类型\r\n            this.curve.closed = true; // 曲线是否闭合\r\n            const points = this.curve.getPoints(50); // 50等分获取曲线点数组\r\n            this.line = new THREE.LineLoop(\r\n                new THREE.BufferGeometry().setFromPoints(points),\r\n                new THREE.LineBasicMaterial({ color: 0x00ff00 })\r\n            ); // 绘制实体线条，仅用于示意曲线，后面的向量线条同理，相关代码就省略了\r\n\r\n            this.runBox = this.addBox(10, 10, 10, '#fff', 0, 0, 0)\r\n            this.add(this.line);\r\n        },\r\n        changePosition (t) {\r\n            const position = this.curve.getPointAt(t); // t: 当前点在线条上的位置百分比，后面计算\r\n            this.runBox.position.copy(position);\r\n        },\r\n        changeLookAt (t) {\r\n            const tangent = this.curve.getTangentAt(t);\r\n            const lookAtVec = tangent.add(this.runBox.position); // 位置向量和切线向量相加即为所需朝向的点向量\r\n            this.runBox.lookAt(lookAtVec);\r\n        },\r\n        // 创建物体\r\n        addBox (chang, gao, kuan, color, x, y, z) {\r\n            const geometry = new THREE.BoxGeometry(chang, gao, kuan);\r\n            const material = new THREE.MeshLambertMaterial ({\r\n                color: color\r\n            });\r\n            const mesh = new THREE.Mesh(geometry, material);\r\n            mesh.position.set(x, y, z);\r\n            this.add(mesh);\r\n            return mesh\r\n        },\r\n        // 添加物体\r\n        add (obj) {\r\n            this.scene.add(obj);\r\n        },\r\n        render () {\r\n            let time = Date.now();\r\n            let t = (time % this.loopTime) / this.loopTime; // 计算当前时间进度百分比\r\n            this.changePosition(t);\r\n            this.changeLookAt(t);\r\n            // 光处理 实时改变光源位置\r\n            let vector = this.camera.position.clone();\r\n            this.ponLight.position.set(vector.x,vector.y,vector.z); //点光源位置\r\n            this.renderer.render(this.scene, this.camera);\r\n            TWEEN.update();\r\n            requestAnimationFrame(this.render);\r\n        },\r\n        init () {\r\n            this.initScene()\r\n            this.initCamera()\r\n            this.initLight()\r\n            this.initScreen()\r\n            this.initRenderer()\r\n            this.initControls()\r\n        }\r\n    },\r\n    mounted(){\r\n        this.$nextTick(this.init);\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n    .wrap {\r\n        width: 100%;\r\n        height: 100%;\r\n        background-size: 100% 100%;\r\n        display: flex;\r\n        .webglDom {\r\n            width: 80%;\r\n            height: 100%;\r\n            // background: url('../assets/img/7.jpg') no-repeat;\r\n            background-size: 100% 100%;\r\n            canvas {\r\n                width: 100%;\r\n            }\r\n        }\r\n    }\r\n</style>\n\n\n// WEBPACK FOOTER //\n// src/views/RunBox.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"wrap\"},[_c('div',{ref:\"webglDom\",staticClass:\"webglDom\"})])}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-4b18c964\",\"hasScoped\":false,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/RunBox.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-4b18c964\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!sass-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./RunBox.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./RunBox.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./RunBox.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-4b18c964\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./RunBox.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/RunBox.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}